"""
# Epd3IN7 definitions
seq = breg[0:4] = b'\x03\x02\x00\x01'
clr_ram_blk = breg[4] = 0xe6
clr_ram_wt = breg[5] = 0xf7
gate_nb = breg[6:9] = b'\xdf\x01\x00'
gate_v = breg[9] = 0x0
source_v = breg[10:13] = b'A\xa82'
st_vcom = breg[13] = 0x44
soft_start = breg[14:19] = b'\xae\xc7\xc3\xc0\xc0'
upd2_norm = breg[19] = 0xf7
lut_norm = breg[20] = 0x1
upd2_part = breg[21] = 0xff
lut_part = breg[22] = 0x2
wr_temp_quick = breg[23] = 0xff
ld_temp_quick = breg[24] = 0xff
upd2_quick = breg[25] = 0xc7
lut_quick = breg[26] = 0x0
wr_temp_gr = breg[27] = 0xff
ld_temp_gr = breg[28] = 0xff
upd2_gr = breg[29] = 0xc7
lut_gr = breg[30] = 0x0
breg = bytearray(b'\x03\x02\x00\x01\xe6\xf7\xdf\x01\x00\x00A\xa82D\xae\xc7\xc3\xc0\xc0\xf7\x01\xff\x02\xff\xff\xc7\x00\xff\xff\xc7\x00')
"""
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# LUTs have been copied from original example for Waveshare Pico e-Paper 3.7:
# https://github.com/waveshare/Pico_ePaper_Code/blob/main/python/Pico-ePaper-3.7.py
#
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


EPD_3IN7_lut_4Gray_GC = bytes([
    0x2A, 0x06, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 1
    0x28, 0x06, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 2
    0x20, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 3
    0x14, 0x06, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 4
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 5
    0x00, 0x02, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x08, 0x08, 0x02,  # 6
    0x00, 0x02, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 7
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 8
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 9
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 10
    0x22, 0x22, 0x22, 0x22, 0x22
])

EPD_3IN7_lut_1Gray_GC = bytes([
    0x2A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 1
    0x05, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 2
    0x2A, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 3
    0x05, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 4
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 5
    0x00, 0x02, 0x03, 0x0A, 0x00, 0x02, 0x06, 0x0A, 0x05, 0x00,  # 6
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 7
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 8
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 9
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 10
    0x22, 0x22, 0x22, 0x22, 0x22
])

EPD_3IN7_lut_1Gray_DU = bytes([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 1
    0x01, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0A, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 3
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 5
    0x00, 0x00, 0x05, 0x05, 0x00, 0x05, 0x03, 0x05, 0x05, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 7
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 9
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x22, 0x22, 0x22, 0x22, 0x22
])

EPD_3IN7_lut_1Gray_A2 = bytes([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 1
    0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 2
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 3
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 4
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 5
    0x00, 0x00, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 6
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 7
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 8
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 9
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 10
    0x22, 0x22, 0x22, 0x22, 0x22
])
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
from core.Eink import Eink
from struct import pack, unpack

class EPDPico(Eink):  # SSD1677

    white = 0b11
    darkgray = 0b01
    lightgray = 0b10
    x_set = '2H'
    breg = b'\x03\x02\x00\x01\xe6\xf7\xdf\x01\x00\x00A\xa82D\xae\xc7\xc3\xc0\xc0\xf7\x01\xff\x02\xff\xff\xc7\x00\xff\xff\xc7\x00'

    def __init__(self, spi=None, *args, **kwargs):
        self.sqr_side = 480
        self.ic_side = 280
        #self._seqs = b'\x03\x02\x00\x01'  # structure ( 0째, 90째, 180째, 270째)
        self._luts = (EPD_3IN7_lut_4Gray_GC,
                      EPD_3IN7_lut_1Gray_GC,
                      EPD_3IN7_lut_1Gray_DU,
                      EPD_3IN7_lut_1Gray_A2)
        super().__init__(spi, *args, **kwargs)

    def _virtual_width(self, num=None):
        ''' returns width the way it should be sent to the chip'''
        return self.width if num is None else 0 if num is 0 else num

if __name__ == "__main__":
    from machine import SPI, Pin
    # Hor _part worlk, hor full shifts the cursor in a weird way. Vertical still needs work
    
    p = Pin(2, Pin.OUT)  # To restet the epd
    epdSPI = SPI(2, sck=Pin(12), baudrate=400000, mosi=Pin(13), miso=None)  # SPI instance fpr E-paper display (miso Pin necessary for SoftSPI, but not needed)
    epd = EPDPico(rotation=90, spi=epdSPI, cs_pin=Pin(10), dc_pin=Pin(9), reset_pin=p, busy_pin=Pin(11))  # Epaper setup (instance of EINK)
    #epd.clear()
    import core.draw_modes as md
    from core.draw import Drawable as DR
    import numr110, numr110V, Notorc25
    
    big = numr110 if not epd._sqr else numr110V
    smol = Notorc25
    
    epd.draw.rect(0,0, 50, 50, f=True)
    epd.show(full=True)
    
    #epd(2, True, True, True)
    epd.draw.text('34533', big, 5, 0, c=1)
    epd.draw.text('34533', big, 5, 120, c=1)
    epd.draw.text('salut', smol, 100, 100)
    epd.show(key=0, clear = True)
    epd.sleep()